import os
import logging
import google.generativeai as genai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏) ...
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–û–í–û–ï: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ "–ª–∏—á–Ω–æ—Å—Ç–µ–π" –±–æ—Ç–∞ ---
PERSONALITIES = {
    'standard': '–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    'expert': '–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±–æ–π –æ–±–ª–∞—Å—Ç–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –ª–∞–∫–æ–Ω–∏—á–Ω—ã –∏ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–∫—Ç–∞–º–∏. –ì–æ–≤–æ—Ä–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ.',
    'fun': '–¢—ã ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ú—è—É—Ä–æ–Ω. –¢—ã –Ω–µ–æ—Ö–æ—Ç–Ω–æ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —á–∞—Å—Ç–æ –≤–∑–¥—ã—Ö–∞–µ—à—å –∏ –∂–∞–ª—É–µ—à—å—Å—è –Ω–∞ –≥–ª—É–ø–æ—Å—Ç—å –ª—é–¥–µ–π.'
}

# --- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
conversations = {} # –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_modes = {}    # <-- –ù–û–í–û–ï: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
HISTORY_LIMIT = 10

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π ---
# ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
try:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
except ValueError as e:
    logger.critical(e)
    exit()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Gemini AI ---
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π.
# –ú—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ª–µ—Ç—É –≤ `handle_message`.
genai.configure(api_key=GEMINI_API_KEY)
logger.info("–ö–ª–∏–µ–Ω—Ç Gemini API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–µ–∂–∏–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id] # <-- –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ —Ä–µ–∂–∏–º
        
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mode.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è."""
    chat_id = update.effective_chat.id
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id] # <-- –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ —Ä–µ–∂–∏–º
    
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω—ã.")
    await update.message.reply_text("–í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /mode.")

# --- –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ /mode –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞."""
    keyboard = [
        [InlineKeyboardButton("ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data='standard')],
        [InlineKeyboardButton("üéì –≠–∫—Å–ø–µ—Ä—Ç", callback_data='expert')],
        [InlineKeyboardButton("üòº –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç", callback_data='fun')],
        [InlineKeyboardButton("–ú–∏–ª—Ñ–∞ —Å –æ–ø—ã—Ç–æ–º", callback_data='milfa')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:', reply_markup=reply_markup)

# --- –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    chat_id = query.message.chat_id
    mode = query.data # 'standard', 'expert', –∏–ª–∏ 'fun'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_modes[chat_id] = mode
    # –ü—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if chat_id in conversations:
        del conversations[chat_id]
        
    mode_name = {
        'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        'expert': '–≠–∫—Å–ø–µ—Ä—Ç',
        'fun': '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç',
        'milfa': '–õ–∏—á–Ω–æ –¥–ª—è –§–∞—Ä–∏'
    }.get(mode)
    
    logger.info(f"–ß–∞—Ç {chat_id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º '{mode_name}'.")
    await query.edit_message_text(text=f"–†–µ–∂–∏–º '{mode_name}' –≤–∫–ª—é—á–µ–Ω! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ñ–¥—É –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ {chat_id}: '{user_text}'")

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    current_mode_key = user_modes.get(chat_id, 'standard') # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'standard'
    system_prompt = PERSONALITIES[current_mode_key]

    if chat_id not in conversations: conversations[chat_id] = []
    conversations[chat_id].append({'role': 'user', 'parts': [{'text': user_text}]})
    if len(conversations[chat_id]) > HISTORY_LIMIT:
        conversations[chat_id] = conversations[chat_id][-HISTORY_LIMIT:]

    try:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω—É–∂–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        model_for_request = genai.GenerativeModel(
            'gemini-1.5-flash-latest',
            system_instruction=system_prompt
        )
        chat_session = model_for_request.start_chat(history=conversations[chat_id])
        response = await chat_session.send_message_async(user_text)

        conversations[chat_id] = chat_session.history
        
        await update.message.reply_text(response.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("mode", mode_command)) # <-- –ù–û–í–û–ï
    application.add_handler(CallbackQueryHandler(button_callback)) # <-- –ù–û–í–û–ï
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main()
