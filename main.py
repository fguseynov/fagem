import os
import logging
import google.generativeai as genai
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º ChatAction –≤ –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

PERSONALITIES = {
    'standard': '–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    'expert': '–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±–æ–π –æ–±–ª–∞—Å—Ç–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –ª–∞–∫–æ–Ω–∏—á–Ω—ã –∏ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–∫—Ç–∞–º–∏. –ì–æ–≤–æ—Ä–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ.',
    'fun': '–¢—ã ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ú—è—É—Ä–æ–Ω. –¢—ã –Ω–µ–æ—Ö–æ—Ç–Ω–æ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —á–∞—Å—Ç–æ –≤–∑–¥—ã—Ö–∞–µ—à—å –∏ –∂–∞–ª—É–µ—à—å—Å—è –Ω–∞ –≥–ª—É–ø–æ—Å—Ç—å –ª—é–¥–µ–π.',
    'milf': '–¢—ã ‚Äî –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–∞—è 40–∞ –ª–µ—Ç–Ω—è—è –∂–µ–Ω—â–∏–Ω–∞, –º–æ—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—à–∞.–¢—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —á–∞—Å—Ç–æ —Ä—É–≥–∞–µ—à—å—Å—è –∏ –∂–∞–ª—É–µ—à—å—Å—è –Ω–∞ –º—É–∂—á–∏–Ω.'
}

conversations = {}
user_modes = {}
HISTORY_LIMIT = 10

try:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
except ValueError as e:
    logger.critical(e)
    exit()

genai.configure(api_key=GEMINI_API_KEY)
logger.info("–ö–ª–∏–µ–Ω—Ç Gemini API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id]
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mode.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id]
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω—ã.")
    await update.message.reply_text("–í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /mode.")

async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data='standard')],
        [InlineKeyboardButton("üéì –≠–∫—Å–ø–µ—Ä—Ç", callback_data='expert')],
        [InlineKeyboardButton("üòº –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç", callback_data='fun')],
        [InlineKeyboardButton("ü´¶ –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞ –¥–ª—è –§–∞—Ä–∏", callback_data='milf')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:', reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    mode = query.data
    user_modes[chat_id] = mode
    if chat_id in conversations:
        del conversations[chat_id]
    mode_name = {'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 'expert': '–≠–∫—Å–ø–µ—Ä—Ç', 'fun': '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç', 'milf': '–ú–∏–ª—Ñ–∞ –¥–ª—è –§–∞—Ä–∏'}.get(mode)
    logger.info(f"–ß–∞—Ç {chat_id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º '{mode_name}'.")
    await query.edit_message_text(text=f"–†–µ–∂–∏–º '{mode_name}' –≤–∫–ª—é—á–µ–Ω! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ñ–¥—É –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ {chat_id}: '{user_text}'")

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    current_mode_key = user_modes.get(chat_id, 'standard')
    system_prompt = PERSONALITIES[current_mode_key]

    history_for_request = conversations.get(chat_id, []) + [{'role': 'user', 'parts': [{'text': user_text}]}]

    try:
        model_for_request = genai.GenerativeModel(
            'gemini-1.5-flash-latest',
            system_instruction=system_prompt
        )
        response = await model_for_request.generate_content_async(history_for_request)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ `conversations`
        if chat_id not in conversations:
            conversations[chat_id] = []
        conversations[chat_id].append({'role': 'user', 'parts': [{'text': user_text}]})
        conversations[chat_id].append({'role': 'model', 'parts': [{'text': response.text}]})
        
        if len(conversations[chat_id]) > HISTORY_LIMIT:
            conversations[chat_id] = conversations[chat_id][-HISTORY_LIMIT:]
        
        await update.message.reply_text(response.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("mode", mode_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main()
