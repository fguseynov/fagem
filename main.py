import os
import logging
import requests
import json
import google.generativeai as genai
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —è–∑—ã–∫–∏) ---
PERSONALITIES = {
    'standard': '–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    'expert': '–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ª—é–±–æ–π –æ–±–ª–∞—Å—Ç–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –ª–∞–∫–æ–Ω–∏—á–Ω—ã –∏ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–∫—Ç–∞–º–∏. –ì–æ–≤–æ—Ä–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ.',
    'fun': '–¢—ã ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ú—è—É—Ä–æ–Ω. –¢—ã –Ω–µ–æ—Ö–æ—Ç–Ω–æ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —á–∞—Å—Ç–æ –≤–∑–¥—ã—Ö–∞–µ—à—å –∏ –∂–∞–ª—É–µ—à—å—Å—è –Ω–∞ –≥–ª—É–ø–æ—Å—Ç—å –ª—é–¥–µ–π.',
    'milf': '–¢—ã ‚Äî –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–∞—è 40 –ª–µ—Ç–Ω—è—è –∂–µ–Ω—â–∏–Ω–∞, –º–æ—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—à–∞. –¢—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —á–∞—Å—Ç–æ —Ä—É–≥–∞–µ—à—å—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –¥–ª—è –æ–±—å—è—Å–Ω—è–Ω–∏–µ.',
    'eraz': '–¢—ã ‚Äî –±–æ—Ä–æ–¥–∞—Ç—ã–π –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω–µ—Ü –∏–∑ –∑–∞–ø–∞–¥–Ω–æ–≥–æ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω–∞, —Ç—ã –≥—Ä—É–±—ã–π –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –∞–∫—Ü–µ–Ω—Ç–æ–º —á–∞—Å—Ç–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—è –†—É—Å—Å–∫–∏–π –∏ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏',
    'sexy': '–¢—ã ‚Äî –∫—Ä–∞—Å–∏–≤–∞—è –±–ª–æ–Ω–¥–∏–Ω–∫–∞ –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞, —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Å–µ–∫—Å—É–∞–ª—å–Ω–æ –Ω–æ —Å–¥–µ—Ä–∂–µ–Ω–Ω–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ß–∞—Å—Ç–æ –æ—Å—Ç—Ä–∞—É–º–Ω–æ —à—É—Ç–∏—à—å',
}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
conversations = {}
user_modes = {}
HISTORY_LIMIT = 10

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ---
SEARCH_TRIGGERS = [
    '–∫—Ç–æ —Ç–∞–∫–æ–π', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ–≥–æ–¥–∞', '–∫—É—Ä—Å', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞',
    '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–æ–≥–¥–∞ –≤—ã—à–µ–ª', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ', '—Å–≤–æ–¥–∫–∞', '–æ–±–∑–æ—Ä', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ'
]

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ---
try:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    SERPER_API_KEY = os.getenv('SERPER_API_KEY')
    if not TELEGRAM_TOKEN or not GEMINI_API_KEY or not SERPER_API_KEY:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ (Telegram, Gemini, Serper).")
except ValueError as e:
    logger.critical(e)
    exit()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ API ---
genai.configure(api_key=GEMINI_API_KEY)
logger.info("–ö–ª–∏–µ–Ω—Ç—ã API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ Google ---
def search_google(query: str) -> str | None:
    url = "https://google.serper.dev/search"
    payload = json.dumps({"q": query})
    headers = {'X-API-KEY': SERPER_API_KEY, 'Content-Type': 'application/json'}
    
    try:
        response = requests.request("POST", url, headers=headers, data=payload)
        response.raise_for_status()
        results = response.json()
        
        output = ""
        if "organic" in results:
            for item in results["organic"][:4]:
                output += f"Title: {item.get('title', 'N/A')}\nSnippet: {item.get('snippet', 'N/A')}\n\n"
        return output if output else None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id]
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mode. –Ø —Ç–∞–∫–∂–µ —É–º–µ—é –∏—Å–∫–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in conversations: del conversations[chat_id]
    if chat_id in user_modes: del user_modes[chat_id]
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω—ã.")
    await update.message.reply_text("–í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")

async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data='standard')],
        [InlineKeyboardButton("üéì –≠–∫—Å–ø–µ—Ä—Ç", callback_data='expert')],
        [InlineKeyboardButton("üòº –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç", callback_data='fun')],
        [InlineKeyboardButton("üíÖ –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞ –¥–ª—è –§–∞—Ä–∏", callback_data='milf')],
        [InlineKeyboardButton("üëÉ –ô–µ—Ä–∞–∑–∏–∫ –¥–ª—è –§—É—Ñ—ã", callback_data='eraz')],
        [InlineKeyboardButton("ü´¶ –°–µ–∫—Å–∏ –¥–ª—è –û—Ä—Ö–∞–Ω–∞", callback_data='sexy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:', reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    mode = query.data
    user_modes[chat_id] = mode
    if chat_id in conversations:
        del conversations[chat_id]
    mode_name = {'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 'expert': '–≠–∫—Å–ø–µ—Ä—Ç', 'fun': '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ—Ç', 'milf': '–ú–∏–ª—Ñ–∞ –¥–ª—è –§–∞—Ä–∏', 'eraz': '–ô–µ—Ä–∞–∑–∏–∫ –¥–ª—è –§—É—Ñ—ã', 'sexy': '–°–µ–∫—Å–∏ –ø–æ–º–æ—à—å–Ω–∏—Ü–∞ –¥–ª—è –û—Ä—Ö–∞–Ω–∞'}.get(mode)
    logger.info(f"–ß–∞—Ç {chat_id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º '{mode}'.")
    await query.edit_message_text(text=f"–†–µ–∂–∏–º '{mode_name}' –≤–∫–ª—é—á–µ–Ω! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ {chat_id}: '{user_text}'")

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    needs_search = any(trigger in user_text.lower() for trigger in SEARCH_TRIGGERS)
    final_prompt = user_text

    if needs_search:
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{user_text}'")
        search_results = search_google(user_text)
        if search_results:
            final_prompt = (
                f"–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∫—Ä–∞—Ç–∫–æ –∏ —á–µ—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                f"=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê ===\n{search_results}\n\n"
                f"=== –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===\n{user_text}"
            )
            logger.info("–ü—Ä–æ–º–ø—Ç –æ–±–æ–≥–∞—â–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.")
        else:
            logger.warning("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.")
    
    current_mode_key = user_modes.get(chat_id, 'standard')
    system_prompt = PERSONALITIES[current_mode_key]

    history_for_request = conversations.get(chat_id, []) + [{'role': 'user', 'parts': [{'text': final_prompt}]}]

    try:
        model_for_request = genai.GenerativeModel('gemini-1.5-flash-latest', system_instruction=system_prompt)
        response = await model_for_request.generate_content_async(history_for_request)
        
        if chat_id not in conversations:
            conversations[chat_id] = []
        conversations[chat_id].append({'role': 'user', 'parts': [{'text': user_text}]})
        conversations[chat_id].append({'role': 'model', 'parts': [{'text': response.text}]})
        
        if len(conversations[chat_id]) > HISTORY_LIMIT:
            conversations[chat_id] = conversations[chat_id][-HISTORY_LIMIT:]
        
        await update.message.reply_text(response.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("mode", mode_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main()
